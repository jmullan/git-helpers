#!/bin/bash
GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
if [ -z "$GIT_DIR" ] ; then
    exit 1
fi
HEADS=$(find ${GIT_DIR}/logs/refs/heads -mindepth 1 -type f | sed "s#${GIT_DIR}/logs/refs/heads/##" | sort)
BRANCHES="${HEADS}"
ARGCOUNT=$#
if [ $ARGCOUNT -eq 1 ] ; then
    if [ "$1" == "--include-remote" ] ; then
        REMOTES=$(find ${GIT_DIR}/logs/refs/remotes -mindepth 1 -type f | sed "s#${GIT_DIR}/logs/refs/remotes/##")
        BRANCHES="${HEADS}"$'\n'"${REMOTES}"
    fi
fi
_MAIN=$(git main)
MAIN=$(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes/origin | grep '^'"${_MAIN}"'$')
DEVELOP=$(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes/origin | grep '^develop$')
IFS=$'\n'
for branch in $BRANCHES; do
    FEATURE=$(echo "${branch}" | grep feature/)
    if [ -n "${FEATURE}" ] && [ -n "${DEVELOP}" ] ; then
        FROM="${DEVELOP}"
    else
        FROM="${MAIN}"
    fi
    if [ "${branch}" = "${FROM}" ] ; then
        FROM=$(git for-each-ref --format='%(refname:short)' refs/heads refs/remotes/origin | grep "^origin/${FROM}"'$')
    fi
    AHEAD=$(git ahead "${branch}" "$FROM")
    BEHIND=$(git behind "${branch}" "$FROM")
    COMMIT_DATE=$(git log "${branch}" --pretty=format:"%ad" --date=short | head -1)
    TRACKING=$(git rev-parse --abbrev-ref --symbolic-full-name "${branch}@{u}" 2>/dev/null)
    if [ $? != 0 ] ; then
        TRACKING=" Upstream gone"
    else
        TRACKING=""
    fi
    echo "${branch}	-${BEHIND}	+${AHEAD} ${COMMIT_DATE} (${FROM})${TRACKING}"
done
